package day16

import (
	"fmt"
	"testing"
)

var (
	lightInput = []string{
		`.|...\....`,
		`|.-.\.....`,
		`.....|-...`,
		`........|.`,
		`..........`,
		`.........\`,
		`..../.\\..`,
		`.-.-/..|..`,
		`.|....-|.\`,
		`..//.|....`,
	}

	largeInput = []string{
		`\.........../..\..../.../......./.....\.................-..............-......./..-................./.\|......`,
		`../..|..\..\...........\..........-..|.|...........................|...../..............-.................-../`,
		`.|..\................../...........................|..............|...-.................././........./........`,
		`......./....\.|................\\....|...\......................../\......|......../..........-........./.....`,
		`........................-......................|...\.............-..|..|..........|...........................`,
		`.............../-............\....\...............-......\..-.............\./...........|.....................`,
		`........./|.|...........................-.........................-.-.......\.........-.......\/....|.........`,
		`............-.-.........\........../........|..........||............./.-.....................................`,
		`................||.....|................-........\............./.................-....../......|..........\...`,
		`........................../\..|.......|........|.|..../../.../.....-.-..-..-..........................\.......`,
		`..-.......\..............|.|...........|............./....-...........|......-.......|...........|.|....\.....`,
		`.\./.\.....-.................................|.......-|...\..........\.........-./......./...................\`,
		`....|.................|..............|..|.\............\\...\......\..................-..................\../|`,
		`..........|.....\..............................|.-.\................-................./|............../.......`,
		`..\|......./............-...............|...|...-..|................../..../.|.........\..........-.........\.`,
		`.|\............../............-/.........\.......\.........../........................./......................`,
		`...\..................................................\...|...............\..............\....................`,
		`..|........./..........|..........................././..............................................\\.|......`,
		`...........-.-..............\..-............-..................|/|..............|..-...../.|................\.`,
		`..........|..|.../...........................|....-....../........................-.........|.................`,
		`\.....................\............/...........-....................../.\...........-..../..........\.........`,
		`........-................\\\.........|/....../\..|..|.-...-..............\.....|..............-.........-.....`,
		`..........-........-....|.................-.........................\\...-...\|..|.............../.....\.|....`,
		`.............................................................|........\-................-....................\`,
		`/......\....|-............./...........|................/...\.........|.....-.............|/...|..|...../.....`,
		`|...-.........-....................................././|..\...\..../.......|.......\................../.......`,
		`...........-..-........../........................\\...................................\......................`,
		`............\.......\\|.|.......-.............|..../........-.....|....|.../.-............./.-........../...|.`,
		`...................................-..............\...\....\...|..........|.................../..../.......|..`,
		`...-...............|......\|/...............-./..../........................\......../.....................|..`,
		`.........................................|....\.\..............\-...\\........\.../...........././............`,
		`......|........./.|./.................-...../..--.......|...............-.\......|...................|........`,
		`.....-.-..............|............../...................\/......./.....|............|....-...................`,
		`...-./..........-..........\...../.......-................./........-............................\....\.......`,
		`\.../.....|....................\|...........................\.......\.../../............/.....................`,
		`.................-.............-.|/..............-.......\...-..|..|........\..../....../...|.................`,
		`.........-.................-..........|..........\...................\............./.................-.....\..`,
		`....................|........./......|................/.............|................/.\....|............\..|.`,
		`..........................\\..../................./.........../-..||......./.............|--....|........\-.-.`,
		`.......-.........|..-......-.....\.......................................\-......./.....\.......\/......\.....`,
		`............-.......\.............-....||.-.....................\........../..................................`,
		`...|........-......\....|.......-.....|.-......\........./.-....-..................../..|..................\..`,
		`....\..-.....\.......\.....................-.........\............/.....-.../......-..................\.......`,
		`.......-...........\.../..............\..........\..........-................../....-..|....-.......-.........`,
		`..../......|...................../\|......-.......-|.........\......|..../||............\........|............`,
		`......\.............|...-..................\...|.............-|..-........|................\..................`,
		`|./../.............................-..............|.../.....-......|.....\......./........-.......\...........`,
		`.............................|...../......\.................\......-.....|..../................./......./.....`,
		`..../................-.-..........\....\...........\......\....|\..................|...../|.......-.........\.`,
		`.........../.-.....././..|..................................-..........\................/........../|....|....`,
		`.||........\.....\.-....\-........................../............................................-..../.......`,
		`.../...\.....-\...........\..........|.\...|\..............|........|........|..\\.../.|............|.........`,
		`.......\..-....../......./..................\...../\.-....................|.......\.......-...................`,
		`...-..........\/..........-...|..................|..................-.../.............-..............\\..-./..`,
		`....\...|..|...........-.........|.............................\....-....../..\......................../...../`,
		`.-../..\..........|....|........../.......-......................\..............-.....................-.......`,
		`|................/..-...........-.\...-|......./.......\..-.....|....\......../............\..................`,
		`../../-\-....................|...........|...|..................-...|...........\.......\.....\.........-/....`,
		`......................................-...-................/.....|..-../..\................|./...../.../......`,
		`....................../.........\......|.\.../......................\...\.....-....................|..........`,
		`.........|.-.......\/...../-......|....-.....-.-...........|..........................|....--.........|.......`,
		`........................................-............./....-........|........|||-.....\....................\..`,
		`...............|\.............\\..-.....|....................\.....-........................\.....|.......|...`,
		`.......|..............................................................................................\.\/\...`,
		`.................|..../..................../.......\............|....................|.-........|....\.|......`,
		`|...............-.................................\........\...........-...................-................|.`,
		`.\.........../....||..............................................|......-.....|......................-.|.....`,
		`......././.........../...........\.......-...--./|..-......................\............./.....|...|..........`,
		`..\...|............|..|.\..........|../.............-...\............|...................................../..`,
		`...................|.-..........-..........|..\...../..../....\.//..........|./...............................`,
		`./|...../....../..................-\......|.......|.......\.............|....\............./.|..-...-......../`,
		`.|....\........\........-....|........../........-.........\..............................................\...`,
		`.....-|..........|....-..................-............................/.|..........\.............../......../.`,
		`.........................\.........|.......|./.../.......\........-........................\..-\.../..........`,
		`.....\....-\..............-......................-....\..................-............................/.......`,
		`.............|...|.............-...\.....|..\................\-..............|.......\........................`,
		`.....|............|./..\......................./..../............../......../.......................|-....-...`,
		`....|....|.......\..|...../......................................\......................-....|..............|.`,
		`.\..../.....-.../.........../................/..\....\............./......\....\............../...............`,
		`/|../...................--.......\....../..-./....-.......................\..../|.............\...|..../......`,
		`.....-.........-...........-.........|.........................../.............|...-.....-......|.............`,
		`............./.......-..../.....|....|............\./....\/.................................../...............`,
		`....\.........\................|...-.....-.......................................\........|........../........`,
		`............................-...........|...|......../..-......\\...../....................|.....|.........-..`,
		`..\./.....-...|-...........\....-....................................\.............-..........\...............`,
		`.................|.\/.-....../............-...\.............\..../.\...\........|............-./............./`,
		`..\..............|..-\.|.............../...............-\..|../.........................\.....................`,
		`....-..........././............/......-........-..........-.....-\................../.........................`,
		`....-......\...|......./.................-.........................../.../..../\.......|............./........`,
		`...|...\........\............................\..........\|..\.-..................../...........|..-\...|.../..`,
		`./.............|.................../..|..|..............|............|.............-...../.|..................`,
		`................/....\.........|...................|.....-/..../..\\........\........./....|....-..../.....\..`,
		`|..............\......\............................................/......||............|/....\..........|.-..`,
		`.............|...........|..........|..............\............\...\.........|...............................`,
		`...../....../\....................../............./.................\.-.......|../-...........................`,
		`\....................|....|...|.\/............-|...|.........................|.................../../.........`,
		`...........\|..|..-...........-...............................-\|............./..................\..........|.`,
		`.........-./....\........\.............-........-.|....................|......................../\............`,
		`..|...............\......-.........................................................\...././...................`,
		`/...|...........-....\.................................\./.......|...../...../.|........-.-.................|.`,
		`/..........\......../......|........|......................................../................\....|.......\.\`,
		`\..\....-..........//.........................\.....\....................................................\....`,
		`......../.............-........................|........................../\.................|................`,
		`.........................................|................./.....-.........-......|//.-........//........-..|.`,
		`......../.\.../............./........|\.....-..\./...........................-....-........|.\|/............\.`,
		`.\.../.....|...../.|.....................-................|..................../..-...\....\..............|...`,
		`/.............|./...../..-.........\.|..............|.......|.....|..../...|...\..................-./.........`,
		`..........|..............\................\....../.-../..-....|.....|.........-...............................`,
		`.............../............|........................../......./.\.....................-...|./.......-.....\..`,
		`.................../.......|.|...........\./-./\||.|....|........-...........\......-....-..........-.........`,
	}
)

func computeHighlight(enlightened [][]byte) int {
	score := 0
	for _, line := range enlightened {
		for _, c := range line {
			if c != 0 {
				score++
			}
		}
	}
	return score
}

type move struct {
	x, y int
	dir  byte
}

const (
	MOVE_UP    = 1
	MOVE_DOWN  = 2
	MOVE_RIGHT = 4
	MOVE_LEFT  = 8
)

var (
	start   = move{0, 0, MOVE_RIGHT}
	invalid = move{}
)

func nextMove(pos move, mirrors [][]byte, enlightened [][]byte) (move, move) {
	if pos.x < 0 || pos.x >= len(mirrors[0]) || pos.y < 0 || pos.y >= len(mirrors) {
		return invalid, invalid
	}
	if (enlightened[pos.y][pos.x] & pos.dir) != 0 {
		return invalid, invalid
	}

	mirror := mirrors[pos.y][pos.x]
	enlightened[pos.y][pos.x] = enlightened[pos.y][pos.x] | pos.dir
	switch mirror {
	case '|':
		if pos.dir == MOVE_UP {
			return move{pos.x, pos.y - 1, pos.dir}, invalid
		}
		if pos.dir == MOVE_DOWN {
			return move{pos.x, pos.y + 1, pos.dir}, invalid
		}
		return move{pos.x, pos.y - 1, MOVE_UP}, move{pos.x, pos.y + 1, MOVE_DOWN}
	case '-':
		if pos.dir == MOVE_RIGHT {
			return move{pos.x + 1, pos.y, pos.dir}, invalid
		}
		if pos.dir == MOVE_LEFT {
			return move{pos.x - 1, pos.y, pos.dir}, invalid
		}
		return move{pos.x - 1, pos.y, MOVE_LEFT}, move{pos.x + 1, pos.y, MOVE_RIGHT}
	case '\\':
		switch pos.dir {
		case MOVE_UP:
			return move{pos.x - 1, pos.y, MOVE_LEFT}, invalid
		case MOVE_DOWN:
			return move{pos.x + 1, pos.y, MOVE_RIGHT}, invalid
		case MOVE_RIGHT:
			return move{pos.x, pos.y + 1, MOVE_DOWN}, invalid
		case MOVE_LEFT:
			return move{pos.x, pos.y - 1, MOVE_UP}, invalid
		}
	case '/':
		switch pos.dir {
		case MOVE_UP:
			return move{pos.x + 1, pos.y, MOVE_RIGHT}, invalid
		case MOVE_DOWN:
			return move{pos.x - 1, pos.y, MOVE_LEFT}, invalid
		case MOVE_RIGHT:
			return move{pos.x, pos.y - 1, MOVE_UP}, invalid
		case MOVE_LEFT:
			return move{pos.x, pos.y + 1, MOVE_DOWN}, invalid
		}
	case '.':
		switch pos.dir {
		case MOVE_UP:
			return move{pos.x, pos.y - 1, pos.dir}, invalid
		case MOVE_DOWN:
			return move{pos.x, pos.y + 1, pos.dir}, invalid
		case MOVE_RIGHT:
			return move{pos.x + 1, pos.y, pos.dir}, invalid
		case MOVE_LEFT:
			return move{pos.x - 1, pos.y, pos.dir}, invalid
		}
	}
	return invalid, invalid
}

func moveInMap(pos move, mirrors [][]byte, enlightened [][]byte) {
	pos1, pos2 := nextMove(pos, mirrors, enlightened)
	if pos1.dir != 0 {
		moveInMap(pos1, mirrors, enlightened)
	}
	if pos2.dir != 0 {
		moveInMap(pos2, mirrors, enlightened)
	}
}

func bytes(input []string, reset bool) [][]byte {
	res := make([][]byte, len(input))
	for i := range input {
		res[i] = []byte(input[i])
		if reset {
			for j := 0; j < len(res[i]); j++ {
				res[i][j] = byte(0)
			}
		}
	}
	return res
}

func display(mirrorMap [][]byte, mirrors bool) {
	fmt.Printf("\n")
	for _, line := range mirrorMap {
		for _, c := range line {
			if mirrors {
				fmt.Printf("%c", c)
			} else if c != 0 {
				fmt.Printf("%x", c)
			} else {
				fmt.Print(".")
			}
		}
		fmt.Print("\n")
	}
}

func computePower(input []string) {
	mirrors := bytes(input, false)
	enlightened := bytes(input, true)
	display(mirrors, true)
	moveInMap(start, mirrors, enlightened)
	display(enlightened, false)
	result := computeHighlight(enlightened)
	fmt.Printf("Score is %d\n", result)
}

func TestDay16Phase1(t *testing.T) {
	// 46
	computePower(lightInput)
	// 8323
	computePower(largeInput)
}

func computeMaxPower(input []string) {
	mirrors := bytes(input, false)
	display(mirrors, true)
	var maxVal, xMax, yMax int
	var maxLight [][]byte
	for y := 0; y < len(mirrors); y++ {
		newStart := move{0, y, MOVE_RIGHT}
		enlightened := bytes(input, true)
		moveInMap(newStart, mirrors, enlightened)
		newScore := computeHighlight(enlightened)
		if newScore > maxVal {
			xMax = 0
			yMax = y
			maxVal = newScore
			maxLight = enlightened
		}
		newStart = move{len(mirrors[0]) - 1, y, MOVE_LEFT}
		enlightened = bytes(input, true)
		moveInMap(newStart, mirrors, enlightened)
		newScore = computeHighlight(enlightened)
		if newScore > maxVal {
			xMax = len(mirrors[0]) - 1
			yMax = y
			maxVal = newScore
			maxLight = enlightened
		}
	}
	for x := 0; x < len(mirrors[0]); x++ {
		newStart := move{x, 0, MOVE_DOWN}
		enlightened := bytes(input, true)
		moveInMap(newStart, mirrors, enlightened)
		newScore := computeHighlight(enlightened)
		if newScore > maxVal {
			xMax = x
			yMax = 0
			maxVal = newScore
			maxLight = enlightened
		}
		newStart = move{x, len(mirrors) - 1, MOVE_UP}
		enlightened = bytes(input, true)
		moveInMap(newStart, mirrors, enlightened)
		newScore = computeHighlight(enlightened)
		if newScore > maxVal {
			xMax = x
			yMax = len(mirrors) - 1
			maxVal = newScore
			maxLight = enlightened
		}
	}
	display(maxLight, false)
	fmt.Printf("Max Score is %d starting at %d, %d\n", maxVal, xMax, yMax)
}

func TestDay16Phase2(t *testing.T) {
	// 51 - 3, 0
	computeMaxPower(lightInput)
	// 8491 - 6, 109
	computeMaxPower(largeInput)
}
